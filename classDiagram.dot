
digraph UmlClassDiagram {
rankdir=BT
color=black
arrowhead=open
node [shape=record, style=filled, fillcolor=gray95]
subgraph  graph_0 {
label="contracts"
0 [label="{AVAXGateway| Internal:\l\ \ \ qiAVAXToken: IQiAvax\lPublic:\l\ \ \ jBenQiAddress: address\l| Internal:\l\ \ \ \ redeemQiAVAX(_amount: uint256, _redeemType: bool): (redeemResult: uint256)\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ setJBenQiAddress(_jBenQiAddress: address)\l\ \ \ \ withdrawAVAX(_amount: uint256, _to: address, _redeemType: bool, _qiAVAXBal: uint256)\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256)\l\ \ \ \ emergencyAVAXTransfer(_to: address, _amount: uint256)\lPublic:\l\ \ \ \ constructor(_qiAVAX: address, _jBenQiAddress: address)\l\ \ \ \ getAVAXBalance(): uint256\l\ \ \ \ getTokenBalance(_token: address): uint256\l}"]
1 [label="{JAdminTools| | Internal:\l\ \ \ \ _addAdmin(account: address)\l\ \ \ \ _removeAdmin(account: address)\lExternal:\l\ \ \ \ initialize()\l\ \ \ \ addAdmin(account: address)\l\ \ \ \ removeAdmin(account: address)\l\ \ \ \ renounceAdmin()\l\ \ \ \ updateVersion(_ver: uint256)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyAdmins()\l\ \ \ \ isAdmin(account: address): bool\l}"]
2 [label="{JAdminToolsStorage| Public:\l\ \ \ contractVersion: uint256\l\ \ \ adminCounter: uint256\l\ \ \ _Admins: mapping\(address=\>bool\)\l| }"]
3 [label="{JBenQi| | Internal:\l\ \ \ \ sendErc20ToCompound(_erc20Contract: address, _numTokensToSupply: uint256): uint256\l\ \ \ \ redeemQiErc20Tokens(_erc20Contract: address, _amount: uint256, _redeemType: bool): (redeemResult: uint256)\l\ \ \ \ setTrancheAExchangeRate(_trancheNum: uint256): uint256\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ \<\<payable\>\> buyTrancheAToken(_trancheNum: uint256, _amount: uint256)\l\ \ \ \ \<\<payable\>\> buyTrancheBToken(_trancheNum: uint256, _amount: uint256)\l\ \ \ \ initialize(_adminTools: address, _feesCollector: address, _tranchesDepl: address, _qiTokenAddress: address, _comptrollAddress: address)\l\ \ \ \ setConstantsValues(_trNum: uint256, _redemPerc: uint16, _redemTimeout: uint32, _blocksPerYear: uint256)\l\ \ \ \ setAVAXGateway(_avaxGateway: address)\l\ \ \ \ setBenQiHelperAddress(_helper: address)\l\ \ \ \ setNewEnvironment(_adminTools: address, _feesCollector: address, _tranchesDepl: address, _qiTokenAddress: address, _comptrollAddress: address)\l\ \ \ \ setQiAvaxContract(_QiAvaxContract: address)\l\ \ \ \ setQiTokenContract(_erc20Contract: address, _QiErc20Contract: address)\l\ \ \ \ getCompoundSupplyRPB(_trancheNum: uint256): uint256\l\ \ \ \ setDecimals(_trancheNum: uint256, _qiTokenDec: uint8, _underlyingDec: uint8)\l\ \ \ \ setTrancheAFixedPercentage(_trancheNum: uint256, _newTrAPercentage: uint256)\l\ \ \ \ addTrancheToProtocol(_erc20Contract: address, _nameA: string, _symbolA: string, _nameB: string, _symbolB: string, _fixPercentage: uint256, _qiTokenDec: uint8, _underlyingDec: uint8)\l\ \ \ \ setTrancheDeposit(_trancheNum: uint256, _enable: bool)\l\ \ \ \ getTrancheACurrentRPB(_trancheNum: uint256): uint256\l\ \ \ \ getTrBValue(_trancheNum: uint256): uint256\l\ \ \ \ redeemTrancheAToken(_trancheNum: uint256, _amount: uint256)\l\ \ \ \ redeemTrancheBToken(_trancheNum: uint256, _amount: uint256)\l\ \ \ \ redeemQiTokenAmount(_trancheNum: uint256, _qiTokenAmount: uint256)\l\ \ \ \ transferTokenToFeesCollector(_tokenContract: address, _amount: uint256)\l\ \ \ \ withdrawAVAXToFeesCollector(_amount: uint256)\l\ \ \ \ claimTotalQiAccruedToReceiver(_receiver: address)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyAdmins()\l\ \ \ \ isQiTokenAllowed(_erc20Contract: address): bool\l\ \ \ \ getTrancheAExchangeRate(_trancheNum: uint256): uint256\l\ \ \ \ calcRPBFromPercentage(_trancheNum: uint256): uint256\l\ \ \ \ getTrAValue(_trancheNum: uint256): (trANormValue: uint256)\l\ \ \ \ getTotalValue(_trancheNum: uint256): uint256\l\ \ \ \ getTrancheBExchangeRate(_trancheNum: uint256, _newAmount: uint256): (tbPrice: uint256)\l\ \ \ \ getTokenBalance(_tokenContract: address): uint256\l\ \ \ \ getEthBalance(): uint256\l\ \ \ \ getTotalQiAccrued(): uint256\l}"]
4 [label="{JBenQiHelper| | Public:\l\ \ \ \ initialize()\l\ \ \ \ getQiTokenExchangeRate(_qiTokenAddress: address): (exchRateMantissa: uint256)\l\ \ \ \ getMantissaHelper(_underDecs: uint256, _qiTokenDecs: uint256): (mantissa: uint256)\l\ \ \ \ getBenQiPurePriceHelper(_qiTokenAddress: address): (purePrice: uint256)\l\ \ \ \ getBenQiPriceHelper(_qiTokenAddress: address, _underDecs: uint256, _qiTokenDecs: uint256): (normPrice: uint256)\l}"]
5 [label="{JBenQiStorage| Public:\l\ \ \ PERCENT_DIVIDER: uint256\l\ \ \ adminToolsAddress: address\l\ \ \ feesCollectorAddress: address\l\ \ \ tranchesDeployerAddress: address\l\ \ \ qiTokenAddress: address\l\ \ \ trollerAddress: address\l\ \ \ rewardsToken: address\l\ \ \ tranchePairsCounter: uint256\l\ \ \ totalBlocksPerYear: uint256\l\ \ \ redeemTimeout: uint32\l\ \ \ qiTokenContracts: mapping\(address=\>address\)\l\ \ \ trancheAddresses: mapping\(uint256=\>TrancheAddresses\)\l\ \ \ trancheParameters: mapping\(uint256=\>TrancheParameters\)\l\ \ \ lastActivity: mapping\(address=\>uint256\)\l\ \ \ qiAVAXToken: IQiAvax\l\ \ \ avaxGateway: IAVAXGateway\l\ \ \ trancheDepositEnabled: mapping\(uint256=\>bool\)\l| }"]
"5struct0" [label="{\<\<struct\>\>\nTrancheAddresses|buyerCoinAddress: address\lqiTokenAddress: address\lATrancheAddress: address\lBTrancheAddress: address\l}"]
"5struct0" -> 5 [arrowhead=diamond, weight=3]
"5struct1" [label="{\<\<struct\>\>\nTrancheParameters|trancheAFixedPercentage: uint256\ltrancheALastActionBlock: uint256\lstoredTrancheAPrice: uint256\ltrancheACurrentRPB: uint256\lredemptionPercentage: uint16\lqiTokenDecimals: uint8\lunderlyingDecimals: uint8\l}"]
"5struct1" -> 5 [arrowhead=diamond, weight=3]
6 [label="{JBenQiStorageV2| Public:\l\ \ \ incentivesControllerAddress: address\l\ \ \ stakeCounterTrA: mapping\(address=\>mapping\(uint256=\>uint256\)\)\l\ \ \ stakeCounterTrB: mapping\(address=\>mapping\(uint256=\>uint256\)\)\l\ \ \ stakingDetailsTrancheA: mapping\(address=\>mapping\(uint256=\>mapping\(uint256=\>StakingDetails\)\)\)\l\ \ \ stakingDetailsTrancheB: mapping\(address=\>mapping\(uint256=\>mapping\(uint256=\>StakingDetails\)\)\)\l\ \ \ jBenQiHelperAddress: address\l| }"]
"6struct0" [label="{\<\<struct\>\>\nStakingDetails|startTime: uint256\lamount: uint256\l}"]
"6struct0" -> 6 [arrowhead=diamond, weight=3]
7 [label="{JFeesCollector| | External:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ \<\<payable\>\> swapEthForToken(_token: address, _amount: uint256, amountOutMin: uint256)\l\ \ \ \ initialize(_adminTools: address)\l\ \ \ \ setAdminToolsAddress(_adminTools: address)\l\ \ \ \ updateVersion(_ver: uint256)\l\ \ \ \ avaxWithdraw(_amount: uint256)\l\ \ \ \ allowToken(_tok: address)\l\ \ \ \ disallowToken(_tok: address)\l\ \ \ \ withdrawTokens(_tok: address, _amount: uint256)\l\ \ \ \ sendTokensToReceiver(_tok: address, _receiver: address, _amount: uint256)\l\ \ \ \ setUniswapAddresses(_factory: address, _routerV02: address)\l\ \ \ \ swapTokenForEth(_token: address, _amount: uint256, amountOutMin: uint256)\l\ \ \ \ swapTokenForToken(_tokenSent: address, _tokenBack: address, _amount: uint256, amountOutMin: uint256)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyAdmins()\l\ \ \ \ getEthBalance(): uint256\l\ \ \ \ getTokenBalance(_tok: address): uint256\l\ \ \ \ isTokenAllowed(_tok: address): bool\l\ \ \ \ pairInfo(_tokenA: address, _tokenB: address): (reserveA: uint256, reserveB: uint256, totalSupply: uint256)\l}"]
8 [label="{JFeesCollectorStorage| Public:\l\ \ \ contractVersion: uint256\l\ \ \ tokensAllowed: mapping\(address=\>bool\)\l\ \ \ factory: address\l\ \ \ uniV2Router02: IUniswapV2Router02\l\ \ \ adminToolsAddress: address\l| }"]
9 [label="{JTrancheAToken| Public:\l\ \ \ MINTER_ROLE: bytes32\l\ \ \ jBQAddress: address\l\ \ \ protTrancheNum: uint256\l| External:\l\ \ \ \ setJBenQiMinter(_jBenQi: address)\l\ \ \ \ mint(account: address, value: uint256)\l\ \ \ \ burn(value: uint256)\lPublic:\l\ \ \ \ constructor(name: string, symbol: string, _trNum: uint256)\l}"]
10 [label="{JTrancheBToken| Public:\l\ \ \ MINTER_ROLE: bytes32\l\ \ \ jBQAddress: address\l\ \ \ protTrancheNum: uint256\l| External:\l\ \ \ \ setJBenQiMinter(_jBenQi: address)\l\ \ \ \ mint(account: address, value: uint256)\l\ \ \ \ burn(value: uint256)\lPublic:\l\ \ \ \ constructor(name: string, symbol: string, _trNum: uint256)\l}"]
11 [label="{JTranchesDeployer| | External:\l\ \ \ \ initialize()\l\ \ \ \ setBenQiAddresses(_jBenQi: address, _jATAddress: address)\l\ \ \ \ deployNewTrancheATokens(_nameA: string, _symbolA: string, _trNum: uint256): address\l\ \ \ \ deployNewTrancheBTokens(_nameB: string, _symbolB: string, _trNum: uint256): address\l\ \ \ \ setNewJBenQiTokens(_newJBenQi: address, _trAToken: address, _trBToken: address)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyProtocol()\l}"]
12 [label="{JTranchesDeployerStorage| Public:\l\ \ \ jBenQiAddress: address\l\ \ \ jAdminToolsAddress: address\l| }"]
13 [label="{MarketHelper| | External:\l\ \ \ \ getTrancheBRewardsPercentage(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256, _extProtRet: uint256, _balFactor: uint256): (trBRewardsPercentage: int256)\lPublic:\l\ \ \ \ initialize()\l\ \ \ \ getTrancheAMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheATVL: uint256)\l\ \ \ \ getTrancheBMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheBTVL: uint256)\l\ \ \ \ getTrancheMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheTVL: uint256)\l\ \ \ \ getTrancheAReturns(_protocol: address, _protTrNum: uint256): (trAReturns: uint256)\l\ \ \ \ getTrancheBReturns(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256, _extProtRet: uint256): (trBReturns: int256)\l}"]
14 [label="{PriceHelper| | Internal:\l\ \ \ \ getChainlinkDescription(_idxMarket: uint256): string\lExternal:\l\ \ \ \ initialize()\l\ \ \ \ setControllerAddress(_controller: address)\l\ \ \ \ setExternalProviderParameters(_idxMarket: uint256, _extProvAddress: address, _reciprPrice: bool)\l\ \ \ \ getLatestChainlinkPairInfo(_idxMarket: uint256): (string, uint256, uint8)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyController()\l\ \ \ \ getChainlinkDecimals(_idxMarket: uint256): uint8\l\ \ \ \ getNormalizedChainlinkPrice(_idxMarket: uint256): uint256\l\ \ \ \ reciprocal(x: uint256): uint256\l}"]
15 [label="{PriceHelperStorage| Public:\l\ \ \ fixed_1: uint256\l\ \ \ controllerAddress: address\l\ \ \ pairs: mapping\(uint256=\>Pair\)\l| }"]
"15struct0" [label="{\<\<struct\>\>\nPair|externalProviderAddress: address\lchLinkDecimals: uint256\lreciprocalPrice: bool\l}"]
"15struct0" -> 15 [arrowhead=diamond, weight=3]
16 [label="{\<\<Library\>\>\nTransferAVAXHelper| | Internal:\l\ \ \ \ safeTransferAVAX(_to: address, _value: uint256)\l}"]
}
subgraph  graph_1 {
label="contracts/interfaces"
17 [label="{\<\<Interface\>\>\nIAVAXGateway| | External:\l\ \ \ \  withdrawAVAX(amount: uint256, onBehalfOf: address, redeemType: bool, _cEthBal: uint256)\l}"]
18 [label="{\<\<Interface\>\>\nIComptrollerLensInterface| | External:\l\ \ \ \  claimComp(address)\l\ \ \ \  compAccrued(address): uint\l}"]
19 [label="{\<\<Interface\>\>\nIJAdminTools| | External:\l\ \ \ \  isAdmin(account: address): bool\l\ \ \ \  addAdmin(account: address)\l\ \ \ \  removeAdmin(account: address)\l\ \ \ \  renounceAdmin()\lPublic:\l\ \ \ \ \<\<event\>\> AdminAdded(account: address)\l\ \ \ \ \<\<event\>\> AdminRemoved(account: address)\l}"]
20 [label="{\<\<Interface\>\>\nIJBenQi| | External:\l\ \ \ \  getTrAValue(_trancheNum: uint256): (trANormValue: uint256)\l\ \ \ \  getTrBValue(_trancheNum: uint256): uint256\l\ \ \ \  getTotalValue(_trancheNum: uint256): uint256\l\ \ \ \  getTrancheACurrentRPB(_trancheNum: uint256): uint256\l\ \ \ \  getTrancheAExchangeRate(_trancheNum: uint256): uint256\l\ \ \ \  getTrancheBExchangeRate(_trancheNum: uint256, _newAmount: uint256): (tbPrice: uint256)\lPublic:\l\ \ \ \ \<\<event\>\> TrancheAddedToProtocol(trancheNum: uint256, trancheA: address, trancheB: address)\l\ \ \ \ \<\<event\>\> TrancheATokenMinted(trancheNum: uint256, buyer: address, amount: uint256, taAmount: uint256)\l\ \ \ \ \<\<event\>\> TrancheBTokenMinted(trancheNum: uint256, buyer: address, amount: uint256, tbAmount: uint256)\l\ \ \ \ \<\<event\>\> TrancheATokenRedemption(trancheNum: uint256, burner: address, amount: uint256, userAmount: uint256, feesAmount: uint256)\l\ \ \ \ \<\<event\>\> TrancheBTokenRedemption(trancheNum: uint256, burner: address, amount: uint256, userAmount: uint256, feesAmount: uint256)\l}"]
21 [label="{\<\<Interface\>\>\nIJBenQiHelper| | External:\l\ \ \ \  getMantissaHelper(_underDecs: uint256, _cTokenDecs: uint256): (mantissa: uint256)\l\ \ \ \  getBenQiPurePriceHelper(_cTokenAddress: address): (compoundPrice: uint256)\l\ \ \ \  getBenQiPriceHelper(_cTokenAddress: address, _underDecs: uint256, _cTokenDecs: uint256): (compNormPrice: uint256)\l}"]
22 [label="{\<\<Interface\>\>\nIJFeesCollector| | Public:\l\ \ \ \ \<\<event\>\> AvaxReceived(sender: address, amount: uint256, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> AvaxWithdrawn(amount: uint256, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenAdded(token: address, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenRemoved(token: address, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenWithdrawn(token: address, amount: uint256, blockNumber: uint256)\l}"]
23 [label="{\<\<Interface\>\>\nIJTrancheTokens| | External:\l\ \ \ \  mint(account: address, value: uint256)\l\ \ \ \  burn(value: uint256)\l}"]
24 [label="{\<\<Interface\>\>\nIJTranchesDeployer| | External:\l\ \ \ \  deployNewTrancheATokens(_nameA: string, _symbolA: string, _trNum: uint256): address\l\ \ \ \  deployNewTrancheBTokens(_nameB: string, _symbolB: string, _trNum: uint256): address\l}"]
25 [label="{\<\<Interface\>\>\nIMarketHelper| | External:\l\ \ \ \  getTrancheBRewardsPercentage(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256, _extProtRet: uint256, _balFactor: uint256): (trBRewardsPercentage: int256)\l\ \ \ \  getTrancheMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheTVL: uint256)\l\ \ \ \  getTrancheAMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheATVL: uint256)\l\ \ \ \  getTrancheBMarketTVL(_protocol: address, _protTrNum: uint256, _underlyingPrice: uint256, _underlyingDecs: uint256): (trancheBTVL: uint256)\l}"]
26 [label="{\<\<Interface\>\>\nIPriceHelper| | External:\l\ \ \ \  setExternalProviderParameters(_idxMarket: uint256, _extProvAddress: address, _reciprPrice: bool)\l\ \ \ \  getLatestChainlinkPairInfo(_idxMarket: uint256): (string, uint256, uint8)\l\ \ \ \  getNormalizedChainlinkPrice(_idxMarket: uint256): uint256\l\ \ \ \  getChainlinkDecimals(_idxMarket: uint256): uint8\l}"]
27 [label="{\<\<Interface\>\>\nIProtocol| | External:\l\ \ \ \  getTrA(_trancheNum: uint256): address\l\ \ \ \  getTrB(_trancheNum: uint256): address\l\ \ \ \  getTrAValue(_trancheNum: uint256): uint256\l\ \ \ \  getTrBValue(_trancheNum: uint256): uint256\l\ \ \ \  getTotalValue(_trancheNum: uint256): uint256\l\ \ \ \  trancheAddresses(_trNum: uint256): (address, address, address, address)\l\ \ \ \  getTrancheACurrentRPB(_trancheNum: uint256): uint256\l\ \ \ \  totalBlocksPerYear(): uint256\l\ \ \ \  setTrAStakingDetails(_user: address, _trancheNum: uint256, _unixTime: uint256, _amount: uint256, _counter: uint256)\l\ \ \ \  setTrBStakingDetails(_user: address, _trancheNum: uint256, _unixTime: uint256, _amount: uint256, _counter: uint256)\l\ \ \ \  getSingleTrancheUserStakeCounterTrA(_user: address, _trancheNum: uint256): uint256\l\ \ \ \  getSingleTrancheUserStakeCounterTrB(_user: address, _trancheNum: uint256): uint256\l\ \ \ \  getSingleTrancheUserSingleStakeDetailsTrA(_user: address, _trancheNum: uint256, _num: uint256): (uint256, uint256)\l\ \ \ \  getSingleTrancheUserSingleStakeDetailsTrB(_user: address, _trancheNum: uint256, _num: uint256): (uint256, uint256)\l\ \ \ \  setTrancheAExchangeRate(_trancheNum: uint256, _trancheAPrice: uint256)\l\ \ \ \  getTrancheAExchangeRate(_trancheNum: uint256): uint256\l\ \ \ \  setTrancheBExchangeRate(_trancheNum: uint256, _trancheBPrice: uint256)\l\ \ \ \  getTrancheBExchangeRate(_trancheNum: uint256): uint256\l}"]
28 [label="{\<\<Interface\>\>\nIQiAvax| | External:\l\ \ \ \  mint()\l\ \ \ \  supplyRatePerTimestamp(): uint256\l\ \ \ \  redeem(uint): uint\l\ \ \ \  redeemUnderlying(uint): uint\l\ \ \ \  exchangeRateStored(): uint\l\ \ \ \  setExchangeRateStored(rate: uint256)\l}"]
29 [label="{\<\<Interface\>\>\nIQiErc20| | External:\l\ \ \ \  mint(uint256): uint256\l\ \ \ \  supplyRatePerTimestamp(): uint256\l\ \ \ \  redeem(uint): uint\l\ \ \ \  redeemUnderlying(uint): uint\l\ \ \ \  exchangeRateStored(): uint\l\ \ \ \  setExchangeRateStored(rate: uint256)\l}"]
}
subgraph  graph_2 {
label="contracts/math"
30 [label="{\<\<Library\>\>\nSafeMathInt| | Internal:\l\ \ \ \ mul(a: int256, b: int256): int256\l\ \ \ \ div(a: int256, b: int256): int256\l\ \ \ \ sub(a: int256, b: int256): int256\l\ \ \ \ add(a: int256, b: int256): int256\l\ \ \ \ toUint256Safe(a: int256): uint256\l}"]
}
subgraph  graph_3 {
label="contracts/mocks"
31 [label="{Chainlink1| | External:\l\ \ \ \ decimals(): uint8\l\ \ \ \ description(): string\l\ \ \ \ version(): uint256\l\ \ \ \ getRoundData(_roundId: uint80): (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\l\ \ \ \ latestRoundData(): (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\l}"]
32 [label="{Chainlink2| | External:\l\ \ \ \ decimals(): uint8\l\ \ \ \ description(): string\l\ \ \ \ version(): uint256\l\ \ \ \ getRoundData(_roundId: uint80): (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\l\ \ \ \ latestRoundData(): (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\l}"]
33 [label="{Model| Public:\l\ \ \ trACurrentRPB: uint256\l\ \ \ totalBlocksPerYear: uint256\l\ \ \ totalTrancheMarketTVL: uint256\l\ \ \ trancheAMarketTVL: uint\l\ \ \ extProtocolPercentage: uint\l\ \ \ balanceFactor: uint\l\ \ \ trAPrice: uint\l| Public:\l\ \ \ \ constructor(_trARPB: uint, _extProtPercent: uint, _balFactor: uint, _trAPrice: uint)\l\ \ \ \ setTranchesMarketTVL(_totAmount: uint, _trAAmount: uint)\l\ \ \ \ setExtProtocolPercent(_extProtPerc: uint)\l\ \ \ \ setBalanceFactor(_balFactor: uint)\l\ \ \ \ setTrARPB(_trARPB: uint)\l\ \ \ \ setTrAPrice(_trAPrice: uint)\l\ \ \ \ getTrancheAReturns(): (trAReturns: uint256)\l\ \ \ \ getExtFutureMaxValue(): (extVal: uint)\l\ \ \ \ getTrAFutureValue(): (trAFutVal: uint)\l\ \ \ \ getTrancheBReturns(): (trBReturns: int)\l\ \ \ \ getDeltaAPYPercentage(): (deltaAPYPercentage: int256)\l\ \ \ \ getTrancheBRewardsPercentage(): (trBRewardsPercentage: int256)\l}"]
34 [label="{Protocol| Public:\l\ \ \ trancheAddresses: mapping\(uint256=\>TrancheAddresses\)\l\ \ \ tranchesMocks: mapping\(uint256=\>Tranche\)\l\ \ \ trCounter: uint256\l\ \ \ totalBlocksPerYear: uint256\l\ \ \ stakeCounterTrA: mapping\(address=\>mapping\(uint256=\>uint256\)\)\l\ \ \ stakeCounterTrB: mapping\(address=\>mapping\(uint256=\>uint256\)\)\l\ \ \ stakingDetailsTrancheA: mapping\(address=\>mapping\(uint256=\>mapping\(uint256=\>StakingDetails\)\)\)\l\ \ \ stakingDetailsTrancheB: mapping\(address=\>mapping\(uint256=\>mapping\(uint256=\>StakingDetails\)\)\)\l| External:\l\ \ \ \ createTranche(_trA: address, _trB: address, _trAVal: uint256, _trBVal: uint256, _trARBP: uint256, _trAPrice: uint256, _trBPrice: uint256)\l\ \ \ \ setTrA(_trancheNum: uint256, _trA: address)\l\ \ \ \ setTrB(_trancheNum: uint256, _trB: address)\l\ \ \ \ getTrA(_trancheNum: uint256): address\l\ \ \ \ getTrB(_trancheNum: uint256): address\l\ \ \ \ setTrAValue(_trancheNum: uint256, _trAVal: uint256)\l\ \ \ \ setTrBValue(_trancheNum: uint256, _trBVal: uint256)\l\ \ \ \ setTotalValue(_trancheNum: uint256)\l\ \ \ \ getSingleTrancheUserStakeCounterTrA(_user: address, _trancheNum: uint256): uint256\l\ \ \ \ getSingleTrancheUserStakeCounterTrB(_user: address, _trancheNum: uint256): uint256\l\ \ \ \ getSingleTrancheUserSingleStakeDetailsTrA(_user: address, _trancheNum: uint256, _num: uint256): (uint256, uint256)\l\ \ \ \ getSingleTrancheUserSingleStakeDetailsTrB(_user: address, _trancheNum: uint256, _num: uint256): (uint256, uint256)\l\ \ \ \ getTrAValue(_trancheNum: uint256): uint256\l\ \ \ \ getTrBValue(_trancheNum: uint256): uint256\l\ \ \ \ getTotalValue(_trancheNum: uint256): uint256\l\ \ \ \ setTrancheACurrentRPB(_trancheNum: uint256, _newRPB: uint256)\l\ \ \ \ getTrancheACurrentRPB(_trancheNum: uint256): uint256\lPublic:\l\ \ \ \ initialize()\l\ \ \ \ setTrAStakingDetails(_user: address, _trancheNum: uint256, _unixTime: uint256, _amount: uint256, _counter: uint256)\l\ \ \ \ setTrBStakingDetails(_user: address, _trancheNum: uint256, _unixTime: uint256, _amount: uint256, _counter: uint256)\l\ \ \ \ setTrancheAExchangeRate(_trancheNum: uint256, _trancheAPrice: uint256)\l\ \ \ \ getTrancheAExchangeRate(_trancheNum: uint256): uint256\l\ \ \ \ setTrancheBExchangeRate(_trancheNum: uint256, _trancheBPrice: uint256)\l\ \ \ \ getTrancheBExchangeRate(_trancheNum: uint256): uint256\l}"]
"34struct0" [label="{\<\<struct\>\>\nTranche|trAValue: uint256\ltrBValue: uint256\ltotalTrValue: uint256\ltrancheACurrentRPB: uint256\lstoredTrancheAPrice: uint256\lstoredTrancheBPrice: uint256\l}"]
"34struct0" -> 34 [arrowhead=diamond, weight=3]
"34struct1" [label="{\<\<struct\>\>\nTrancheAddresses|buyerCoinAddress: address\lcTokenAddress: address\lATrancheAddress: address\lBTrancheAddress: address\l}"]
"34struct1" -> 34 [arrowhead=diamond, weight=3]
"34struct2" [label="{\<\<struct\>\>\nStakingDetails|startTime: uint256\lamount: uint256\l}"]
"34struct2" -> 34 [arrowhead=diamond, weight=3]
}
subgraph  graph_4 {
label="contracts/uniswap"
35 [label="{\<\<Interface\>\>\nIUniswapV2Pair| | External:\l\ \ \ \  MINIMUM_LIQUIDITY(): uint\l\ \ \ \  factory(): address\l\ \ \ \  token0(): address\l\ \ \ \  token1(): address\l\ \ \ \  getReserves(): (reserve0: uint112, reserve1: uint112, blockTimestampLast: uint32)\l\ \ \ \  price0CumulativeLast(): uint\l\ \ \ \  price1CumulativeLast(): uint\l\ \ \ \  kLast(): uint\l\ \ \ \  mint(to: address): (liquidity: uint)\l\ \ \ \  burn(to: address): (amount0: uint, amount1: uint)\l\ \ \ \  swap(amount0Out: uint, amount1Out: uint, to: address, data: bytes)\l\ \ \ \  skim(to: address)\l\ \ \ \  sync()\l\ \ \ \  initialize(address, address)\lPublic:\l\ \ \ \ \<\<event\>\> Mint(sender: address, amount0: uint, amount1: uint)\l\ \ \ \ \<\<event\>\> Burn(sender: address, amount0: uint, amount1: uint, to: address)\l\ \ \ \ \<\<event\>\> Swap(sender: address, amount0In: uint, amount1In: uint, amount0Out: uint, amount1Out: uint, to: address)\l\ \ \ \ \<\<event\>\> Sync(reserve0: uint112, reserve1: uint112)\l}"]
36 [label="{\<\<Library\>\>\nUniswapV2Library| | Internal:\l\ \ \ \ sortTokens(tokenA: address, tokenB: address): (token0: address, token1: address)\l\ \ \ \ pairFor(factory: address, tokenA: address, tokenB: address): (pair: address)\l\ \ \ \ getReserves(factory: address, tokenA: address, tokenB: address): (reserveA: uint, reserveB: uint)\l\ \ \ \ quote(amountA: uint, reserveA: uint, reserveB: uint): (amountB: uint)\l\ \ \ \ getAmountOut(amountIn: uint, reserveIn: uint, reserveOut: uint): (amountOut: uint)\l\ \ \ \ getAmountIn(amountOut: uint, reserveIn: uint, reserveOut: uint): (amountIn: uint)\l\ \ \ \ getAmountsOut(factory: address, amountIn: uint, path: address[]): (amounts: uint[])\l\ \ \ \ getAmountsIn(factory: address, amountOut: uint, path: address[]): (amounts: uint[])\l}"]
}
0 -> 17 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
0 -> 28 []
0 -> 16 [style=dashed, ]
1 -> 2 [arrowhead=empty, arrowsize=3, weight=4, ]
1 -> 19 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 6 [arrowhead=empty, arrowsize=3, weight=4, ]
3 -> 20 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 19 [style=dashed, ]
3 -> 29 [style=dashed, ]
3 -> 24 [style=dashed, ]
3 -> 21 [style=dashed, ]
3 -> 16 [style=dashed, ]
3 -> 23 [style=dashed, ]
3 -> 18 [style=dashed, ]
4 -> 21 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
4 -> 29 [style=dashed, ]
5 -> 28 []
5 -> 17 []
6 -> 5 [arrowhead=empty, arrowsize=3, weight=4, ]
7 -> 8 [arrowhead=empty, arrowsize=3, weight=4, ]
7 -> 22 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
7 -> 19 [style=dashed, ]
7 -> 16 [style=dashed, ]
7 -> 35 [style=dashed, ]
7 -> 36 [style=dashed, ]
9 -> 23 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
10 -> 23 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
11 -> 12 [arrowhead=empty, arrowsize=3, weight=4, ]
11 -> 24 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
11 -> 9 [style=dashed, ]
11 -> 19 [style=dashed, ]
11 -> 10 [style=dashed, ]
13 -> 25 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
13 -> 30 [style=dashed, ]
13 -> 27 [style=dashed, ]
14 -> 15 [arrowhead=empty, arrowsize=3, weight=4, ]
14 -> 26 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
33 -> 30 [style=dashed, ]
34 -> 27 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
36 -> 35 [style=dashed, ]
}